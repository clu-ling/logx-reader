# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key = "blarg"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Registers the request handler
# ~~~~~
play.http.requestHandler = "play.api.http.DefaultHttpRequestHandler"

# Registers the filters
# ~~~~~
#play.http.filters = "utils.Filters"

# The application DI modules
# ~~~~~
play.modules {
  #enabled += "modules.BaseModule"
  #enabled += "modules.JobModule"
  #enabled += "play.api.libs.mailer.MailerModule"
}

play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

//    # Auth token cleaner
//    quartz.schedules.AuthTokenCleaner {
//      expression = "0 0 */1 * * ?"
//      timezone = "UTC"
//      description = "cleanup the auth tokens on every hour"
//    }
}

# Security Filter Configuration - Content Security Policy
play.filters.headers {
  # The Content-Security-Policy header. If null, the header is not set.
  contentSecurityPolicy = null #"default-src 'self'"
//  contentSecurityPolicy = "default-src 'self' blob:;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" img-src 'self' data:  *.fbcdn.net *.twimg.com *.googleusercontent.com *.xingassets.com vk.com *.yimg.com secure.gravatar.com;"
//  #contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" style-src 'self' 'unsafe-inline' cdnjs.cloudflare.com maxcdn.bootstrapcdn.com cdn.jsdelivr.net fonts.googleapis.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" font-src 'self' fonts.gstatic.com fonts.googleapis.com cdnjs.cloudflare.com;"
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com;"
//  #contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" connect-src 'self' twitter.com *.xing.com;"
//  # For Cytoscape graph layout
//  contentSecurityPolicy = ${play.filters.headers.contentSecurityPolicy}" worker-src 'self' blob:;"
}

# Map static resources from the /public folder to the /assets URL path
play.assets {
  path = "/public"
  urlPrefix = "/assets"
}

play.filters.hosts {
  allowed = ["."]
}

contexts {

  reader {
    fixed-pool-size = 4
  }

}